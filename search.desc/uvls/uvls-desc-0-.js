searchState.loadedDescShard("uvls", 0, "LSP json-rpc interface with tower, system initialization …\nThe LSP\nSettings for some client config.\nThis Module Represents the UVL Language Server (LSP) Logic\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis Module handles IDE Specific Logic (eg. Highlights, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nload all files under given a path\nload a file, this is tricky because the editor can also …\nStart the backend LSP server\nImplements the semantic analysis using Z3\nThis web interface allows simple configuration of uvl …\nEasy to work with AST parsing and util.\nFind files control what files need to be relinked\nConfiguration is stored in json files like this\nFile update logic\nLogs a message at the info level.\ngreen tree parsing (tree-sitter)\nmulti-stage compiler, it provides access to files in …\nPath resolving on file level\nContains a central struct RootGraph. This struct includes …\nThis Module provides basic utility functions for the LSP …\nAst container each symbol kind lives in its own vector\nCombines the AST with metadata, this is also a public …\n1-&gt;N parent child relation\nutility iterators over different elements of interest\niterators over diffrent symbole types in the tree\nTransform a tree-sitter tree into the Ast ECS via …\nBasic Ast components\nSearch a symbol by byte offset in O(N)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nreturns all Symbols with same name, used for cardinality …\nTransform a tree-sitter tree into the Ast ECS via …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ncall f for each child under sym and prefix\nFind all symboles under root with prefix path. Search …\nFind imports for any prefix of path\nAlso track the binding for path, each segment of path has …\nprefix of sym from root\nparent feature of an attribute\nsource range for a symbol if there is any\nTransform a tree-sitter tree into the Ast ECS via …\nIterate all attributes under root, and track theire …\nIterate all named symbole under root\nAll children under root, when merge_root_features sub …\nIterate all named symbole under root and track their …\nThis trait makes the tree-sitter cursor api easier to use. …\nAdd ranges based on self.levels vec\nReturns the argument unchanged.\nReturns the argument unchanged.\nget the current block header\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nvisits all valid children of a tree-sitter (red tree) …\nA symbol represents an entity in some uvl document\nType definitions for symbols\nThe upper bound of the range (exclusive).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe lower bound of the range (inclusive).\nGenerate Graph Code:\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nreturns cardinality for Node\nparse a namespace\nreport error if a node has cardinality or attributes\nReport error if a node has children,cardinality or …\ncreate the import tree map and the general search index …\nReturns the argument unchanged.\nget the current block header\nCalls <code>U::from(self)</code>.\nAdd a child to parent\nPush an error with location of the current block header\nparse a namespace\nvisits all valid children of a tree-sitter (green tree) …\ntry to go forward until we find a node as a field name\ntry to go down\ntry to go forward until we find a node of kind name\ntry to goto a named node on the current layer\ntry to go forward at least once until we find a node of …\nUtility function, tree-sitter uses cursor to traverse …\nloop over all siblings\nSimple virtual filesystem for fast completions, resolve …\nA file that is not imported by any other is root file\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nall imports to a\nall imports from a\nCheck an import between a and b\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nfind a file under path from origin\nall subfiles from origin under path, returns …\nThis type is used to provide quickactions for a error\nUsed to gather errors in compiler stages\nCheck if line breaks are correct eg. inside parenthesis\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPublishes all collected errors and infos to the IDE\nThis enum is used for storing a cardinality of a feature\nThis Enum is used for Serialization and Deserialization of …\nThis Enum stores the value configured by the user or …\nThis defines a config for the corresponding file\nImport corresponds to a new File and is also used for …\nValue represents a specific configuration of a …\nThis function helps define the context for a completion.\nThe function <code>default</code> returns a <code>ConfigValue</code> based on the …\nTry to extract the json value under key from node,\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nfind the path of the object containing node(ignores arrays)\nPrase a configuration object\nselect the nearest object containing pos\nReturn the corresponding Type Definition of ConfigValue\nA document can be owned by the operating system or opened …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nupdate the document text using text deltas form the editor\nConfiguration with a module and resolved configuration …\nAn actual instance of a root file with all subfiles\nA ast symbole within a module context\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nVisit all instances in the module\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDepth first iteration\nBind a recursive configuration doc to a linear set of …\nResolves references inside this module\nTurns a the set of linear configuration values of this …\nserialize file recursive while accommodate for cardinality\nAll the parsing components and their consumers in a …\nHandles update for a single draft and parses it …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis handler links documents together, it also does type …\nTurn a tree-sitter trees into a usable rust structure and …\nget latest draft and sync root\nWait for latest draft version\nWait until uri is found in the linked root graph\nwait until uri newer than timestamp in the root graph\nwait until ALL parsing is done and root is clean\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFix types\nBest effort type resolve for a single tree-sitter …\nReturns the argument unchanged.\nReturns the argument unchanged.\nFind possible types\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFind all symboles from origin under path\nFind all attributes in orgin under context, allso gives …\nSince there can be multiple possible interpretations, two …\nBest effort tupe resolving\nFind all symboles from origin under path while keeping …\nA fully linked version of all files, computed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nfind all attributes from origin under context, useful for …\nfind all symbols from origin under path, also keep track …\nContains the error value\nContains the success value\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHandles all sorts of Code actions.\nHandle color highlighting for IDEs\nHandle Completion and code suggestions for IDEs\nInlay hints are used to display the configuration in the …\nhandles text jumps, like go to definition etc\nSyntax highlight happens in here we mainly use tree-sitter …\nif node is a path create a Path\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nif it is a attribute path return true otherwise false\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAll things completion related happen in here, the process …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInlays are managed as a global token state, there can only …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA static reference wether a client has z3 installed\nThis stores the Z3 solution\nZ3 process interface(over stdio)\nThis function is a helper function which checks if a LSP …\nThis function checks the SAT Level of a FileID\nchecks if config is SAT Solvable\nchecks if the current configuration loaded to Z3 is still …\nCreator for SMTModel\nfind constant boolean values for dead features and other …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<strong>If SAT (must be checked beforehand)</strong> this function returns …\nTurn smt-lib strings to rust. (currently incomplete)\nPushes new content to the Z3 Solver\nreturns the output of Z3\n<strong>If SAT (must be checked beforehand)</strong> this function returns …\nruns smt-analysis on configurations.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis is a helper module, to use SMT (and in that sense Z3) …\ncreate the source for an assert, if the assert should be …\ncreate source to config z3 Solver\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nextract values from a response string\nEach variable is encoded as v{n} where n is an index into …\ntree to source\nTranslates the constraints into Expressions which can be …\nTranslates expr into Expressions which can be converted to …\nConverts a UVL Module into a SMT Module\ncreate an SMTModule, but the asserts are only constraints\ncreate with all Variable the source for the SMTSolver\nThe UVL file source for the configuration\nThis Enum stores the different Item types for the …\nDifferent State for the UVL File displayed in the …\nThe different UI Actions executable by the user from the …\nThe UIConfigState stores the frontend entries inside the …\nThis struct represents a entry in the UVL configuration.\nData structure to store and display the different elements …\nThis stores the state of the configurator of a UVL file.\nCreate a builder for building <code>AppProps</code>. On the builder, …\ngoes through the UVL file and stores each entry …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis Module is used for frontend rendering\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTransfer state from with a new module\nredux style state management\nUI coroutine handles all state managment and creation\nKeeps the UI in sync with its context\nHTTP server for the configuration interface\nProps\nreturns the requested Icon Element to display in the …\nProps\nRender UVL content to HTML\nProps\nCreate a builder for building <code>IconProps</code>. On the builder, …\nCreate a builder for building <code>ConfigInputProps</code>. On the …\nCreate a builder for building <code>RealInputProps</code>. On the …\nCreate a builder for building <code>ValueProps</code>. On the builder, …\nCreate a builder for building <code>FileEntryProps</code>. On the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")